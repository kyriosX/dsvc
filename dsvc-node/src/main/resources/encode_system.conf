# //#min-nr-of-members
akka.cluster.min-nr-of-members = 2
# //#min-nr-of-members

# //#role-min-nr-of-members
akka.cluster.role {
  client.min-nr-of-members = 1
  encoder.min-nr-of-members = 1
}
# //#role-min-nr-of-members

# //#adaptive-router
akka.actor.deployment {
  /encoderClient/videoEncoderRouter = {
    router = adaptive-group
    # metrics-selector = heap
    # metrics-selector = load
    metrics-selector = cpu
    #metrics-selector = mix
    nr-of-instances = 100
    routees.paths = ["/user/videoEncoder"]
    cluster {
      enabled = on
      use-role = encoder
      allow-local-routees = off
      max-nr-of-instances-per-node = 2
    }
  }
}
# //#adaptive-router

akka {

  log-dead-letters = on
  loglevel = "debug"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    maximum-payload-bytes = 30000000
    log-remote-lifecycle-events = off
    netty.tcp {
      port = 8888
      maximum-frame-size = 4097152
      send-buffer-size = 52428800
      receive-buffer-size = 52428800
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://EncodeSystem@192.168.50.4:8888"]

    auto-down-unreachable-after = 30s

    # how often should the node send out gossip information?
    gossip-interval = 10s
    # discard incoming gossip messages if not handled within this duration
    gossip-time-to-live = 10s

    # how often should the leader perform maintenance tasks?
    leader-actions-interval = 5s

    # how often should the node move nodes, marked as unreachable by the failure
    # detector, out of the membership ring?
    unreachable-nodes-reaper-interval = 5s

    # How often the current internal stats should be published.
    # A value of 0s can be used to always publish the stats, when it happens.
    # Disable with "off".
    publish-stats-interval = off

    # The id of the dispatcher to use for cluster actors. If not specified
    # default dispatcher is used.
    # If specified you need to define the settings of the actual dispatcher.
    use-dispatcher = ""

    # Gossip to random node with newer or older state information, if any with
    # this probability. Otherwise Gossip to any random live node.
    # Probability value is between 0.0 and 1.0. 0.0 means never, 1.0 means always.
    gossip-different-view-probability = 0.8
    # Reduced the above probability when the number of nodes in the cluster
    # greater than this value.
    reduce-gossip-different-view-probability = 400

    # Settings for the Phi accrual failure detector (http://ddg.jaist.ac.jp/pub/HDY+04.pdf
    # [Hayashibara et al]) used by the cluster subsystem to detect unreachable
    # members.
    failure-detector {

      # FQCN of the failure detector implementation.
      # It must implement akka.remote.FailureDetector and have
      # a public constructor with a com.typesafe.config.Config and
      # akka.actor.EventStream parameter.
      implementation-class = "akka.remote.PhiAccrualFailureDetector"

      # How often keep-alive heartbeat messages should be sent to each connection.
      heartbeat-interval = 10s

      # Defines the failure detector threshold.
      # A low threshold is prone to generate many wrong suspicions but ensures
      # a quick detection in the event of a real crash. Conversely, a high
      # threshold generates fewer mistakes but needs more time to detect
      # actual crashes.
      threshold = 12.0

      # Number of the samples of inter-heartbeat arrival times to adaptively
      # calculate the failure timeout for connections.
      max-sample-size = 1000

      # Minimum standard deviation to use for the normal distribution in
      # AccrualFailureDetector. Too low standard deviation might result in
      # too much sensitivity for sudden, but normal, deviations in heartbeat
      # inter arrival times.
      min-std-deviation = 1000ms

      # Number of potentially lost/delayed heartbeats that will be
      # accepted before considering it to be an anomaly.
      # This margin is important to be able to survive sudden, occasional,
      # pauses in heartbeat arrivals, due to for example garbage collect or
      # network drop.
      acceptable-heartbeat-pause = 30s

      # Number of member nodes that each member will send heartbeat messages to,
      # i.e. each node will be monitored by this number of other nodes.
      monitored-by-nr-of-members = 2
      # After the heartbeat request has been sent the first failure detection
      # will start after this period, even though no heartbeat mesage has
      # been received.
      expected-response-after = 20s

    }
  }
}

# //#min-nr-of-members
akka.cluster.min-nr-of-members = 2
# //#min-nr-of-members

# //#role-min-nr-of-members
akka.cluster.role {
  client.min-nr-of-members = 1
  encoder.min-nr-of-members = 1
}
# //#role-min-nr-of-members

# //#adaptive-router
akka.actor.deployment {
  /encoderClient/videoEncoderRouter = {
    router = adaptive-group
    # metrics-selector = heap
    # metrics-selector = load
    metrics-selector = cpu
    #metrics-selector = mix
    nr-of-instances = 100
    routees.paths = ["/user/videoEncoder"]
    cluster {
      enabled = on
      use-role = encoder
      allow-local-routees = off
      max-nr-of-instances-per-node = 2
    }

    # Routers with dynamically resizable number of routees; this feature is
    # enabled by including (parts of) this section in the deployment
    resizer {
      enabled = off

      # The fewest number of routees the router should ever have.
      lower-bound = 1

      # The most number of routees the router should ever have.
      # Must be greater than or equal to lower-bound.
      upper-bound = 10

      # Threshold used to evaluate if a routee is considered to be busy
      # (under pressure). Implementation depends on this value (default is 1).
      # 0: number of routees currently processing a message.
      # 1: number of routees currently processing a message has
      # some messages in mailbox.
      # > 1: number of routees with at least the configured pressure-threshold
      # messages in their mailbox. Note that estimating mailbox size of
      # default UnboundedMailbox is O(N) operation.
      pressure-threshold = 1

      # Percentage to increase capacity whenever all routees are busy.
      # For example, 0.2 would increase 20% (rounded up), i.e. if current
      # capacity is 6 it will request an increase of 2 more routees.
      rampup-rate = 0.2

      # Minimum fraction of busy routees before backing off.
      # For example, if this is 0.3, then we'll remove some routees only when
      # less than 30% of routees are busy, i.e. if current capacity is 10 and
      # 3 are busy then the capacity is unchanged, but if 2 or less are busy
      # the capacity is decreased.
      # Use 0.0 or negative to avoid removal of routees.
      backoff-threshold = 0.3

      # Fraction of routees to be removed when the resizer reaches the
      # backoffThreshold.
      # For example, 0.1 would decrease 10% (rounded up), i.e. if current
      # capacity is 9 it will request an decrease of 1 routee.
      backoff-rate = 0.1

      # Number of messages between resize operation.
      # Use 1 to resize before each message.
      messages-per-resize = 10
    }
  }
}
# //#adaptive-router